// Generated by CoffeeScript 1.6.3
(function() {
  window.api_key = 'special-key';

  describe('Swagger models version 1.2 spec', function() {
    beforeEach(function() {
      var success;
      success = function() {
        return "";
      };
      window.authorizations.add("key", new ApiKeyAuthorization("api_key", "special-key", "header"));
      window.swagger = new SwaggerApi({
        url: 'http://localhost:8002/api/api-docs',
        success: success
      });
      return waitsFor(function() {
        return swagger.ready != null;
      });
    });
    return describe("get model operations", function() {
      beforeEach(function() {
        window.body = null;
        window.response = null;
        window.callback = null;
        window.error = null;
        window.success_callback = function(data) {
          return window.response = data;
        };
        return window.error_callback = function(data) {
          return window.error = data;
        };
      });
      it("verifies the Pet model", function() {
        var pet, props;
        pet = window.swagger.apis.pet.models["Pet"];
        expect(pet.name).toBe("Pet");
        expect(pet.properties.length).toBe(6);
        props = pet.properties;
        expect(props[0].name).toBe("id");
        expect(props[0].dataType).toBe("integer");
        expect(props[1].name).toBe("category");
        expect(props[1].dataType).toBe("Category");
        expect(props[2].name).toBe("name");
        expect(props[2].dataType).toBe("string");
        expect(props[3].name).toBe("photoUrls");
        expect(props[3].dataType).toBe("array");
        expect(props[3].refDataType).toBe("string");
        expect(props[4].name).toBe("tags");
        expect(props[4].dataType).toBe("array");
        expect(props[4].refDataType).toBe("Tag");
        expect(props[5].name).toBe("status");
        return expect(props[5].dataType).toBe("string");
      });
      return it("verifies the Pet sample JSON", function() {
        var pet, sample;
        pet = window.swagger.apis.pet.models["Pet"];
        sample = pet.createJSONSample();
        log(sample);
        return log(JSON.stringify(sample));
      });
    });
  });

}).call(this);
